import { FastifyInstance } from 'fastify';
import { IncomingMessage, Server, ServerResponse } from 'http';
import Users from '../../controllers/Users';

export default (app: FastifyInstance<Server, IncomingMessage, ServerResponse>, opts: { prefix: string }, next: (err?: Error) => void) => {
    app.post(
        '/sign-in',
        {
            schema: {
                description: 'Authentication endpoint, for all the users, to allow access to protected resources',
                summary: 'Sign in to access protected resources',
                tags: ['auth'],
                body: {
                    type: 'object',
                    properties: {
                        username: { type: 'string', description: 'Will accept either username or email address' },
                        password: { type: 'string', description: 'User password' },
                    },
                    required: ['username', 'password'],
                },
                response: {
                    200: {
                        description: 'Success',
                        type: 'object',
                        properties: {
                            message: { type: 'string' },
                            error: { type: 'string' },
                            role: { type: 'string' },
                            token: { type: 'string' },
                        },
                    },
                },
            },
        },
        async (req, res) => await new Users(app, req, res).authenticate()
    );

    app.post(
        '/reset-password',
        {
            schema: {
                description: 'Reset forgotten user password. An autogenerated password will be sent to the supplied email address.',
                tags: ['auth'],
                response: {
                    ...app.utils.statuscodes,
                },
                body: {
                    type: 'object',
                    properties: {
                        email: { type: 'string', description: `User's email address` },
                    },
                    required: ['email'],
                },
                summary: 'Reset passowrd',
            },
        },
        async (req, res) => await new Users(app, req, res).resetUserPassword()
    );

    // pass execution to the next middleware
    next();
};

exports.autoPrefix = '/auth';
